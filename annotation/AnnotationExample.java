package codeStates.annotation;

//애노테이션 개념
public class AnnotationExample {
    /*
        애노테이션 : 소스 코드가 컴파일되거나 실행될 때에 컴파일러 및 다른 프로그램에게 필요한 정보를 전달해주는 문법 요소
                    ex. @Override

        애노테이션의 종류
        - 표준 애너테이션 : JDK에 내장되어 있는 일반적인 애너테이션
        - 메타 애너테이션 : 다른 애너테이션을 정의할 때 사용하는 애너테이션

        표준 애너테이션
        - @Override : 상위 클래스의 메서드를 오버라이딩하거나 추상 메서드를 구현하는 메서드라는 것을 컴파일러에게 알려주는 역할
        - @Deprecated : 기존에 사용하던 기술이 다른 기술로 대체되어 기존 기술을 적용한 코드를 더 이상 사용하지 않도록 유도하는 경우에 사용
        - @SuppressWarnings : 컼파일 경고 메시지가 나타나지 않도록 한다. 경우에 따라서 경고가 발생할 것이 충분히 예상됨에도 묵인해야 할 때 주로 사용
        - @FunctionalInterface : 함수형 인터페이스를 선언할 때, 컴파일러가 함수형 인터페이스의 선언이 바르게 되었는지 확인함.

        메타 애너테이션
        - @Target : 애너테이션을 적용할 '대상'을 지정하는 데 사용
        - @Ducumented : 애너테이션을 대한 정보가 javadoc으로 작성한 문서에 포함되도록 하는 애너테이션 설정
        - @Inherited : 하위클래스가 애너테이션을 상속받도록 함.
        - @Retention : 애너테이션의 지속 시간을 결정하는 데 사용.
        - @Repeatable : 애너테이션을 여러 번 붙일 수 있도록 허용한다는 의미

        사용자 정의 애너테이션
        @interface 애너테이션명 {
            타입 요소명();
        }
     */
}
